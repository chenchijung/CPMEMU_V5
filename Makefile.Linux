# Makefile for cpmemu4

# CC must be an ANSI-C compiler
CC            =	gcc

#OPTIMIZE	= -g -m486
#OPTIMIZE	= -g -save-temps -m486
# OPTIMIZE	=
# OPTIMIZE	= -O1
# OPTIMIZE	= -O2
# OPTIMIZE	= -O2 -save-temps
# OPTIMIZE	= -O2 -save-temps -m486

# optimizing with gcc 2.x.x
#OPTIMIZE	= -O3 -m486

# optimizing with gcc 3.x.x
# (please search for your processor in "man gcc")
# (tip: search first for "pentium3")
#
# -march=cpu-type
#	Tune to cpu-type everything applicable about the gen?#	erated code, except for the ABI and the set of avail?#	able instructions.  The choices for cpu-type are i386,
#	i486, i586, i686, pentium, pentium-mmx, pentiumpro,
#	pentium2, pentium3, pentium4, k6, k6-2, k6-3, athlon,
#	athlon-tbird, athlon-4, athlon-xp, athlon-mp,
#	winchip-c6, winchip2 and c3.
#
#OPTIMIZE	= -O3 -mcpu=arm1176jzf-s
#
#OPTIMIZE	= -O3 -march=i386
#OPTIMIZE	= -O3 -march=i486
#OPTIMIZE	= -O3 -march=i586
#OPTIMIZE	= -O3 -march=i686
#OPTIMIZE	= -O3 -march=pentium
#OPTIMIZE	= -O3 -march=pentium-mmx
#OPTIMIZE	= -O3 -march=pentiumpro
#OPTIMIZE	= -O3 -march=pentium2
#OPTIMIZE	= -O3 -march=pentium3
#OPTIMIZE	= -O3 -march=pentium4
#OPTIMIZE	= -O3 -march=nocona	# 64 Bit Intel
#OPTIMIZE	= -O3 -march=k6
#OPTIMIZE	= -O3 -march=k6-2
#OPTIMIZE	= -O3 -march=k6-3
#OPTIMIZE	= -O3 -march=athlon
#OPTIMIZE	= -O3 -march=athlon-tbird
#OPTIMIZE	= -O3 -march=athlon-4
#OPTIMIZE	= -O3 -march=athlon-xp
#OPTIMIZE	= -O3 -march=athlon-mp
#OPTIMIZE	= -O3 -march=athlon64	# 64 Bit AMD
#OPTIMIZE	= -O3 -march=athlon64-sse3
#OPTIMIZE	= -O3 -march=barcelona
OPTIMIZE	= -Ofast

# -DUSE_GNU_READLINE for command recall/editing and filename completion
# -DBGii_BUG works around a problem in Backgrounder II
# -DBIOS to build a CP/M bios and monitor program into the emulator
#  (see also YAZE_OBJS, below)
#
# -- The following options are new:
#
# -DMMU compiles support for MMU-switched memory and CP/M 3.1 extensions
# -DMMUTABLES=<val> sets the no of MMU tables (default 16)
# -DYAZEPAGESIZE=<val> sets the page size for every page pointer (default 4 KB)
#		(The MMUPAGEPOINTERS are generated automatically)
# -DSHOWMMU shows at start the MMU tables (will be defined if MMUTEST is def.)
# -DMMUTEST setup pages for 3000h - BFFFh to pages above 64K
#	    (-DSHOWMMU will be set and the MMU-Table 7 will be selected)
#	    (Only used unter CP/M 2.2. See README-1.20 for details)
#	    (DO NOT USE IT IF YOU WANT TO RUN CP/M 3.1 - THIS IS ONLY FOR TEST!)
#
# -DMEMSIZE=<val> sets size of memory in KBytes (default 64KB, with MMU: 512KB)
#
# -DBOOTSYS loads yaze-cpm3.boot at 0100H  instead of  yaze.boot (CP/M 2.2).
#	    yaze-cpm3.boot is idendical with A:CPM3.COM. Inside there is
#	    the CP/M 3.1 loader BOOTSYS.COM + CPM3.SYS (see BOOTSYS.Z80
#	    on drive P:). You can generate CPM3.COM with
#		"pip cpm3.com=bootsys.com,cpm3.sys".
#	    If BOOTSYS is given you can boot CP/M 2.2 (SUPERDOS) with
#		"yaze -l -1 -b yaze.boot".
#
# -DSHOWDRV shows the entries in @dtbl, the DPHs and the DPBs when CP/M 3.1
#	    starts or "mount.com" or "sys mount" is running.
# -DMULTIO  Use Multi-I/O disk transfere
# -DRWDEBUG Set the debug mode for read/write operations. If MULTIO is defined
#	    and multi sector count is set by the bdos the multi sector read
#	    and write will be displayed with "r" and "w". The rest will be
#	    displayed with ".". Reads/writes without multi sector count will
#	    be displayed with "R" and "W".
#
# -DUCSD    Set mode if you want to use UCSD-pascal version for CP/M.
#	    It was neccessary because UCSD-Pascal-System does not use the
#	    register B when it gives Sektor or Track to the BIOS. With this
#	    Flag only the Register C of BC is used in SETTRK & SETSEC. It
#	    was neccessary because yaze-ag crashes.
#
# --
# solaris2, freebsd and cygwin needs -D__EXTENSIONS__
# linux needs -D_BSD_SOURCE -D_POSIX_SOURCE
#
OPTIONS	= -DGNU_READLINE  -DLINUX #-DZ80DDT -DZ80DEBUG	#yaze-ag 2.51.3 Z80 engine
#OPTIONS = -DGNU_READLINE -static -static-libgcc -static-libstdc++ -s -DLINUX -DZ80_YAZE110	 #yaze110 z80 engine

# OPTIONS =
	# -DBIOS -D_BSD_SOURCE -D_POSIX_SOURCE -DMMU -DBOOTSYS -DMULTIO \
	#	-DUSE_GNU_READLINE \
	# -DSHOWDRV


# Link with CP/M BIOS support,
OBJS     = cpmemu.o cpmbdos.o mem_mmu.o cpmbios.o cpmglob.o cpmemuin.o simz80.o simz80_yaze110.o z80dsm.o asm_linux.a #keytran.o conin.o keytest.o nulrq.o

# -lreadline -lcurses -liberty if you defined USE_GNU_READLINE
#  (you don't need -liberty on linux or BSD systems)
#
#LIBS	      = -lreadline -lncurses
LIBS	      = -lreadline -lncurses
#LIBS	      =


###### you should not need to change anything below this line ######
# CWARN	      = -ansi -pedantic -Wall -Wshadow \
#		-Wpointer-arith -Wnested-externs -Winline
# CWARN	      = -ansi -pedantic -Wall -Wshadow \
#		-Wpointer-arith -Wnested-externs -Winline
# CWARN	      = -ansi -Wall

CWARN		= -Wno-unused-result -Wno-deprecated-declarations

CFLAGS        =	$(CWARN) $(OPTIMIZE) $(DEBUG_OPTIONS) $(OPTIONS) -DLIBDIR=\"$(LIBDIR)/\"

SRCS	      = cpmemu.c mem_mmu.c cpmbdos.c cpmbios.c cpmemuin.c cpmglob.c simz80.c simz80_yaze110.c z80dsm.c # keytran.c conin.c keytest.c nulrq.c

all:		cpmemu5

cpmemu5:	$(OBJS)
		$(CC) $(CFLAGS) $(OBJS) $(LIBS) -o $@

clean:;		rm -f *.o *~ core
		rm -f *.i *.s
		rm -f yaze

cpmemu.o:	cpmemu.c  cpmemu.h cpmglob.h simz80.h  	# Makefile
cpmbdos.o:	cpmbdos.c cpmemu.h cpmglob.h 			# Makefile
cpmbios.o:	cpmbios.c cpmemu.h cpmglob.h		 	# Makefile
cpmemuin.o:	cpmemuin.c cpmemu.h 				 	# Makefile
cpmglob.o:	cpmglob.c cpmemu.h cpmglob.h
mem_mmu.o:	mem_mmu.c mem_mmu.h	mem_mmu_yaze110.h
simz80.o:	simz80.c simz80.h 					 		# yaze-ag z80 engine
simz80_yaze110.o:	simz80_yaze110.c simz80_yaze110.h	# yaze110 z80 engine
z80dsm.o:	z80dsm.c

#keytran.o:	keytran.c ktt.h ytypes.h		# keyboard translation from yaze-ag
#conin.o:	conin.c ytypes.h ktt.h chan.h   # keyboard translation from yaze-ag
#keytest.o:	keytest.c ytypes.h ktt.h        # keyboard translation from yaze-ag
#nulrq.o:	nulrq.c							# keyboard translation from yaze-ag
